{"version":3,"sources":["components/Options.js","audio/01-È un grande sollievo scriverne.mp3","audio/02-Non ho più dormito bene da quando ho ritrovato mio zio Otto morto.mp3","audio/03-e più di una volta mi sono veramente doman-dato se fossi diventato pazzo o se lo diventerò.mp3","audio/04- In un certo senso sarebbe stato tutto più misericordioso se non avessi avuto l_oggetto qui, nel mio studio.mp3","components/ReplayIcon.js","components/WaveformBars.js","components/other/ItFlagIcon.js","components/AudioPlayerWindow.js","components/AudioPlayer.js","components/BinIcon.js","components/MicrophoneIcon.js","components/AudioRecorder.js","App.js","reportWebVitals.js","index.js"],"names":["Options","id","className","ReplayIcon","replay","setReplay","onClick","color","width","height","margin","innerHeight","innerWidth","innerHeight1","WaveformBars","audio","time","duration","trackNum","useState","waveform","setWaveform","useEffect","audioContext","AudioContext","fetch","then","response","arrayBuffer","buffer","options","audio_context","array_buffer","scale","Promise","resolve","reject","WaveformData","createFromAudio","err","stroke","fill","transform","strokeWidth","channel","min1","min_array","max1","max_array","xScale","scaleBand","domain","range","length","yScale1","scaleLinear","max","d","nice","yScale2","min","lineScale","x","style","textAnchor","opacity","map","i","y","bandwidth","y1","fontStyle","toFixed","ItFlagIcon","rx","PlayBackContainer","styled","div","PlayerContainer","VoteContainer","WindowContainer","IconContainer","TestContainer","AudioPlayerWindow","text","togglePlay","isPlaying","randomiseTrack","AudioPlayer","setDuration","setIsPlaying","currentTime","setCurrentTime","setTrackNum","audioPlayer","useRef","animationRef","seconds","current","loadedmetadata","readyState","whilePlaying","changePlayerCurrentTime","requestAnimationFrame","finishedPlaying","changeTrack","Math","floor","random","tracks","audio1","audio2","audio3","audio4","console","log","match","replace","onEnded","ref","src","loop","preload","prevValue","pause","cancelAnimationFrame","play","BinIcon","handleDelete","MicrophoneIcon","playing","stopVideo","startVideo","navigator","userMedia","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","AudioRecorder","setPlaying","audioStream","setAudioStream","recorder","setRecorder","audioUrl","setAudioUrl","start","chunks","ondataavailable","ev","push","data","onstop","blob","Blob","type","audioUrl1","window","URL","createObjectURL","a","mediaDevices","mediaStream","MediaRecorder","getTracks","stop","setTimeout","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2039065a.chunk.js","sourcesContent":["import React from 'react'\nimport {IoIosOptions} from 'react-icons/io'\n\nexport const Options = () => {\n    return (\n        <IoIosOptions id=\"options\" className=\"icon\"/>\n    )\n}\n\n","export default __webpack_public_path__ + \"static/media/01-È un grande sollievo scriverne.e253fcbf.mp3\";","export default __webpack_public_path__ + \"static/media/02-Non ho più dormito bene da quando ho ritrovato mio zio Otto morto.37ee7dfc.mp3\";","export default __webpack_public_path__ + \"static/media/03-e più di una volta mi sono veramente doman-dato se fossi diventato pazzo o se lo diventerò.5db87318.mp3\";","export default __webpack_public_path__ + \"static/media/04- In un certo senso sarebbe stato tutto più misericordioso se non avessi avuto l_oggetto qui, nel mio studio.6b53639b.mp3\";","import { MdReplay } from \"react-icons/md\"\n\nexport const ReplayIcon = ({replay, setReplay}) => {\n    \n    return (\n        <>\n            <MdReplay \n            onClick={setReplay} \n            color={replay ? \"darkOrchid\" : \"white\"}\n            />\n        </>\n    )\n}\n\n\n","import { useState, useEffect } from \"react\";\nimport WaveformData from \"waveform-data\";\nimport { scaleLinear, scaleBand, min, max, range } from \"d3\";\n\nconst width = 1200;\nconst height = 200;\n\nconst margin = {\n  top: 10,\n  right: 10,\n  bottom: 10,\n  left: 10,\n};\n\nconst innerHeight = height - margin.top - margin.bottom;\nconst innerWidth = width - margin.left - margin.right;\n\nconst innerHeight1 = innerHeight / 2;\n\nexport const WaveformBars = ({ audio, time, duration, trackNum }) => {\n  const [waveform, setWaveform] = useState(null);\n\n  useEffect(() => {\n    if (audio) {\n      const audioContext = new AudioContext();\n\n      fetch(audio)\n        .then((response) => response.arrayBuffer())\n        .then((buffer) => {\n          const options = {\n            audio_context: audioContext,\n            array_buffer: buffer,\n            scale: 1024, //64 128 256 152\n          };\n\n          return new Promise((resolve, reject) => {\n            WaveformData.createFromAudio(options, (err, waveform) => {\n              if (err) {\n                reject(err);\n              } else {\n                resolve(waveform);\n              }\n            });\n          });\n        })\n        .then((waveform) => {\n          setWaveform(waveform);\n        });\n    }\n  }, [audio]);\n\n  if (!waveform || !audio) {\n    return (\n      <svg height={height} width={width}>\n        <rect height={height} width={width} stroke=\"black\" fill=\"none\" />\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          <text className=\"svg-label\">Waveform</text>\n          <rect\n            height={innerHeight}\n            width={innerWidth}\n            stroke=\"black\"\n            strokeWidth={0.05}\n            fill=\"none\"\n          />\n        </g>\n      </svg>\n    );\n  }\n\n  const channel = waveform.channel(0);\n\n  // const container = d3.select(\"#waveform-container\");\n\n  const min1 = channel.min_array();\n  const max1 = channel.max_array();\n\n  const xScale = scaleBand()\n    .domain(range(waveform.length))\n    .range([0, innerWidth]);\n\n  //ranground\n  const yScale1 = scaleLinear()\n    .domain([0, max(max1, (d) => d)])\n    .range([innerHeight1, 0])\n    .nice();\n\n  const yScale2 = scaleLinear()\n    .domain([0, min(min1, (d) => d)])\n    .range([innerHeight, innerHeight1])\n    .nice();\n\n  const lineScale = scaleLinear().domain([0, duration]).range([0, innerWidth]);\n  return (\n    <>\n      <svg height={height} width={width}>\n        <rect height={height} width={width} stroke=\"black\" fill=\"none\" />\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          <text\n            x={innerWidth}\n            style={{ textAnchor: \"end\" }}\n            className=\"svg-label\"\n            opacity={0.4}\n          >\n            {trackNum}\n          </text>\n          <text className=\"svg-label\">Waveform</text>\n          <rect\n            height={innerHeight}\n            width={innerWidth}\n            stroke=\"black\"\n            strokeWidth={0.05}\n            fill=\"none\"\n          />\n\n          {max1.map((d, i) => {\n            return (\n              <rect\n                fill=\"greenyellow\"\n                stroke=\"black\"\n                strokeWidth={0.05}\n                x={xScale(i)}\n                y={yScale1(d)}\n                width={xScale.bandwidth()}\n                height={innerHeight1 - yScale1(d)}\n              />\n            );\n          })}\n          {min1.map((d, i) => {\n            return (\n              <rect\n                fill=\"greenyellow\"\n                stroke=\"black\"\n                strokeWidth={0.05}\n                x={xScale(i)}\n                y={innerHeight1}\n                width={xScale.bandwidth()}\n                height={innerHeight - yScale2(d)}\n              />\n            );\n          })}\n          {time && (\n            <g transform={`translate(${lineScale(time)}, 0)`}>\n              <line stroke=\"darkcyan\" y1={innerHeight} />\n            </g>\n          )}\n        </g>\n        <text\n          x={width - 35}\n          y={height - 3}\n          stroke=\"darkmagenta\"\n          opacity={1}\n          fontStyle=\"italic\"\n          opacity={0.7}\n        >\n          {(duration - time).toFixed(2)}\n        </text>\n      </svg>\n    </>\n  );\n};\n","const height = 30;\nconst width = 40;\n\nconst margin = {\n  top: 5,\n  right: 5,\n  bottom: 5,\n  left: 5,\n};\n\nexport const ItFlagIcon = () => {\n  return (\n    <svg height={height} width={width}>\n        <rect height={height} width={width} fill=\"bisque\" rx={5}/>\n      <g transform={`translate(${margin.left}, ${margin.top})`}>\n        <rect height={20} width={10} fill=\"green\" />\n        <rect x={10} height={20} width={10} fill=\"white\" />\n        <rect x={20} height={20} width={10} fill=\"red\"/>\n      </g>\n      \n    </svg>\n  );\n};\n","import styled from \"styled-components\";\nimport { GrPause, GrPlay } from \"react-icons/gr\";\nimport { GiPerspectiveDiceSixFacesFour } from \"react-icons/gi\";\nimport { FiThumbsDown, FiThumbsUp } from \"react-icons/fi\";\nimport { FaRegSadCry } from \"react-icons/fa\";\nimport { BiHappyAlt } from \"react-icons/bi\";\nimport { ReplayIcon } from \"./ReplayIcon\";\nimport { WaveformBars } from \"./WaveformBars\";\nimport { ItFlagIcon } from \"./other/ItFlagIcon\";\n\nconst PlayBackContainer = styled.div`\n  display: flex;\n`;\n\nconst PlayerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  padding-right: 10px;\n  padding-left: 10px;\n  font-size: 25px;\n  background: black;\n  color: white;\n  stroke: white;\n  border-radius: 5px 0px 0px 5px;\n\n  polygon {\n    stroke: currentColor;\n  }\n  path {\n    stroke: currentColor;\n  }\n\n  svg:hover {\n    transform: scale(1.2);\n    cursor: pointer;\n  }\n`;\n\nconst VoteContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  padding-right: 10px;\n  padding-left: 10px;\n  font-size: 25px;\n\n  svg:hover {\n    transform: scale(1.2);\n    cursor: pointer;\n  }\n`;\n\nconst WindowContainer = styled.div`\n\n\n`;\nconst IconContainer = styled.div`\n  margin-bottom: 0px;\n`;\n\nconst TestContainer = styled.div`\n  display: flex;\n  margin-left: 90px;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 15px;\n\n`\n\nexport const AudioPlayerWindow = ({\n  text,\n  togglePlay,\n  replay,\n  setReplay,\n  audio,\n  time,\n  duration,\n  isPlaying,\n  randomiseTrack,\n  trackNum,\n}) => {\n  return (\n    <WindowContainer>\n      <TestContainer>\n        <p>{text}</p>\n        <IconContainer>\n          <ItFlagIcon />\n        </IconContainer>\n      </TestContainer>\n\n      <PlayBackContainer>\n        <PlayerContainer>\n          <div onClick={togglePlay}>{isPlaying ? <GrPause /> : <GrPlay />}</div>\n          <ReplayIcon replay={replay} setReplay={setReplay} />\n          <GiPerspectiveDiceSixFacesFour onClick={randomiseTrack} />\n        </PlayerContainer>\n        <VoteContainer>\n          <BiHappyAlt />\n          <FiThumbsUp />\n          <FiThumbsDown />\n          <FaRegSadCry />\n        </VoteContainer>\n        <WaveformBars\n          trackNum={trackNum}\n          audio={audio}\n          time={time}\n          duration={duration}\n        />\n      </PlayBackContainer>\n    </WindowContainer>\n  );\n};\n","import audio1 from \"../audio/01-È un grande sollievo scriverne.mp3\";\nimport audio2 from \"../audio/02-Non ho più dormito bene da quando ho ritrovato mio zio Otto morto.mp3\";\nimport audio3 from \"../audio/03-e più di una volta mi sono veramente doman-dato se fossi diventato pazzo o se lo diventerò.mp3\";\nimport audio4 from \"../audio/04- In un certo senso sarebbe stato tutto più misericordioso se non avessi avuto l_oggetto qui, nel mio studio.mp3\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { AudioPlayerWindow } from \"./AudioPlayerWindow\";\n\nexport const AudioPlayer = () => {\n  const [duration, setDuration] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [replay, setReplay] = useState(false);\n  const [trackNum, setTrackNum] = useState(0);\n\n  const audioPlayer = useRef(); //Ref for out audio component\n  const animationRef = useRef();\n\n  useEffect(() => {\n    const seconds = audioPlayer.current.duration.toFixed(2);\n    setDuration(seconds);\n  }, [audioPlayer?.current?.loadedmetadata, audioPlayer?.current?.readyState]);\n\n  const togglePlay = () => {\n    const prevValue = isPlaying;\n    setIsPlaying(!prevValue);\n    if (!prevValue) {\n      audioPlayer.current.play();\n      animationRef.current = requestAnimationFrame(whilePlaying);\n    } else {\n      audioPlayer.current.pause();\n      cancelAnimationFrame(animationRef.current);\n    }\n  };\n\n  const whilePlaying = () => {\n    changePlayerCurrentTime();\n    animationRef.current = requestAnimationFrame(whilePlaying);\n  };\n\n  const finishedPlaying = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n    audioPlayer.current.currentTime = 0;\n  };\n\n  const changePlayerCurrentTime = () => {\n    setCurrentTime(audioPlayer.current.currentTime);\n  };\n\n  useEffect(() => {\n    changeTrack();\n  }, []);\n\n  const changeTrack = () => {\n    setTrackNum(Math.floor(Math.random() * tracks.length));\n  };\n\n  const randomiseTrack = () => {\n    changeTrack();\n  };\n  const activateReplay = () => {\n    const replayPrev = replay;\n    setReplay(!replayPrev);\n  };\n\n  const tracks = [audio1, audio2, audio3, audio4];\n  const audio = tracks[trackNum];\n\n\n  console.log(typeof audio1)\n\n  const regex = /(?<=\\-).*?(?=\\.)/\n  const text = audio.match(regex)[0].replace(\"_\", \"'\")\n\n  return (\n    <>\n      <div id=\"audioPlayer\">\n        <audio\n          onEnded={finishedPlaying}\n          ref={audioPlayer}\n          src={audio}\n          loop={replay ? true : false}\n          preload=\"auto\"\n        />\n      </div>\n      <AudioPlayerWindow\n        text={text}\n        togglePlay={togglePlay}\n        isPlaying={isPlaying}\n        onEnded={finishedPlaying}\n        replay={replay}\n        setReplay={activateReplay}\n        audio={audio}\n        time={currentTime}\n        duration={duration}\n        randomiseTrack={randomiseTrack}\n        trackNum={trackNum}\n      />\n    </>\n  );\n};\n","import React from 'react'\nimport {ImBin} from \"react-icons/im\"\nexport const BinIcon = ({handleDelete}) => {\n    return (\n        <ImBin onClick={handleDelete}/>\n    )\n}\n","import { BiMicrophoneOff, BiMicrophone } from \"react-icons/bi\";\n\nexport const MicrophoneIcon = ({playing, stopVideo, startVideo}) => {\n    return (\n        <>\n        {playing ? (\n            <BiMicrophoneOff\n              onClick={stopVideo}\n              color={playing ? \"darkOrchid\" : \"white\"}\n            />\n          ) : (\n            <BiMicrophone\n              onClick={startVideo}\n              color={playing ? \"darkOrchid\" : \"white\"}\n            />\n          )}\n          </>\n    )\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { GrPause, GrPlay } from \"react-icons/gr\";\nimport { WaveformBars } from \"./WaveformBars\";\nimport { ReplayIcon } from \"./ReplayIcon\";\nimport { BinIcon } from \"./BinIcon\";\nimport { MicrophoneIcon } from \"./MicrophoneIcon\";\n\nconst PlayBackContainer = styled.div`\n  display: flex;\n`;\n\nconst PlayerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  padding-right: 10px;\n  padding-left: 10px;\n  font-size: 25px;\n  background: black;\n  color: white;\n  stroke: white;\n  border-radius: 5px 0px 0px 5px;\n\n  polygon {\n    stroke: currentColor;\n  }\n  path {\n    stroke: currentColor;\n  }\n\n  svg:hover {\n    transform: scale(1.2);\n    cursor: pointer;\n  }\n`;\n\nconst VoteContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  padding-right: 10px;\n  padding-left: 10px;\n  font-size: 25px;\n\n  svg:hover {\n    transform: scale(1.2);\n    cursor: pointer;\n  }\n`;\n\nnavigator.userMedia =\n  navigator.getUserMedia ||\n  navigator.webkitGetUserMedia ||\n  navigator.mozGetUserMedia ||\n  navigator.msGetUserMedia;\n\nexport const AudioRecorder = () => {\n  const [playing, setPlaying] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioStream, setAudioStream] = useState(null);\n  const [recorder, setRecorder] = useState(null);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [replay, setReplay] = useState(false);\n\n  const audioPlayer = useRef();\n  const animationRef = useRef();\n\n  useEffect(() => {\n    if (recorder) {\n      recorder.start();\n      let chunks = [];\n\n      recorder.ondataavailable = function (ev) {\n        chunks.push(ev.data);\n      };\n\n      recorder.onstop = (ev) => {\n        let blob = new Blob(chunks, { type: \"audio/wav\" });\n        chunks = [];\n        let audioUrl1 = window.URL.createObjectURL(blob);\n        setAudioUrl(audioUrl1);\n      };\n    }\n  }, [recorder]);\n\n  useEffect(() => {\n    const seconds = audioPlayer.current.duration.toFixed(2);\n    setDuration(seconds);\n  }, [audioPlayer?.current?.loadedmetadata, audioPlayer?.current?.readyState]);\n\n  const handleDelete = () => {\n    setAudioUrl(null);\n  };\n  const togglePlay = () => {\n    const prevValue = isPlaying;\n    setIsPlaying(!prevValue);\n    if (!prevValue) {\n      audioPlayer.current.play();\n      animationRef.current = requestAnimationFrame(whilePlaying);\n    } else {\n      audioPlayer.current.pause();\n      cancelAnimationFrame(animationRef.current);\n    }\n  };\n\n  const whilePlaying = () => {\n    changePlayerCurrentTime();\n    animationRef.current = requestAnimationFrame(whilePlaying);\n  };\n\n  const finishedPlaying = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n    audioPlayer.current.currentTime = 0;\n  };\n\n  const changePlayerCurrentTime = () => {\n    setCurrentTime(audioPlayer.current.currentTime);\n  };\n  const startVideo = async () => {\n    setPlaying(true);\n    const mediaStream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    setAudioStream(mediaStream);\n    setRecorder(new MediaRecorder(mediaStream));\n  };\n\n  const stopVideo = () => {\n    setPlaying(false);\n    audioStream.getTracks()[0].stop();\n    setTimeout(() => {\n      recorder.stop();\n    }, 500);\n  };\n  const activateReplay = () => {\n    const replayPrev = replay;\n    setReplay(!replayPrev);\n  };\n\n  return (\n    <div>\n      <div>\n        <PlayBackContainer>\n          <audio\n            onEnded={finishedPlaying}\n            preload=\"auto\"\n            ref={audioPlayer}\n            src={audioUrl}\n            loop={replay ? true : false}\n          />\n          <PlayerContainer>\n            <MicrophoneIcon\n              playing={playing}\n              stopVideo={stopVideo}\n              startVideo={startVideo}\n            />\n            {audioUrl &&\n              <>\n                <div onClick={togglePlay}>\n                  {isPlaying ? <GrPause /> : <GrPlay />}\n                </div>\n                <ReplayIcon replay={replay} setReplay={activateReplay} />\n              </>\n            }\n          </PlayerContainer>\n          <VoteContainer>\n            <BinIcon handleDelete={handleDelete} />\n          </VoteContainer>\n\n          <WaveformBars\n            audio={audioUrl}\n            time={currentTime}\n            duration={duration}\n          />\n        </PlayBackContainer>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport {Options} from \"./components/Options\";\nimport { AudioPlayer } from \"./components/AudioPlayer\";\nimport { AudioRecorder } from \"./components/AudioRecorder\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"app\">\n        <Options />\n        \n        <AudioPlayer/>\n        <AudioRecorder />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./test.css\"\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}