{"version":3,"sources":["components/Waveform.js","components/AudioRecorder.js","audio/veroeproprio.wav","components/CustomAudioPlayer.js","components/TestAudio.js","App.js","reportWebVitals.js","index.js"],"names":["Waveform","audio","time","duration","useState","waveform","setWaveform","useEffect","audioContext","AudioContext","fetch","then","response","arrayBuffer","buffer","options","audio_context","array_buffer","scale","Promise","resolve","reject","WaveformData","createFromAudio","err","width","height","margin","innerHeight","innerWidth","channel","min1","min_array","max1","max_array","xScale","scaleLinear","domain","length","range","yScale","min","max","nice","lineScale","x","y","stroke","fill","transform","strokeWidth","d","area","i","y0","y1","opacity","fontStyle","toFixed","AudioRecorder","playing","setPlaying","audioStream","setAudioStream","recorder","setRecorder","audioUrl","setAudioUrl","setDuration","currentTime","audioPlayer","useRef","start","chunks","ondataavailable","ev","push","data","onstop","blob","Blob","type","audioUrl1","window","URL","createObjectURL","document","getElementsByClassName","src","seconds","Math","floor","current","loadedmetadata","readyState","startVideo","a","navigator","mediaDevices","getUserMedia","mediaStream","MediaRecorder","className","onPlay","ref","controls","onClick","getTracks","stop","setTimeout","href","download","userMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","CustomAudioPlayer","isPlaying","setIsPlaying","setCurrentTime","progressBar","animationRef","whilePlaying","value","changePlayerCurrentTime","requestAnimationFrame","changeRange","style","setProperty","calculateTime","minutes","returnedMinutes","secs","returnedSeconds","onEnded","onChange","defaultValue","isNaN","Number","prevValue","pause","cancelAnimationFrame","play","TestAudio","console","log","togglePlay","onPause","preload","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.45dd2c08.chunk.js","sourcesContent":["import { useState, useEffect} from \"react\";\nimport WaveformData from \"waveform-data\";\nimport { scaleLinear, min, max, area } from \"d3\";\n\nexport const Waveform = ({ audio, time, duration }) => {\n  const [waveform, setWaveform] = useState(null);\n\n  useEffect(() => {\n    if (audio) {\n      const audioContext = new AudioContext();\n\n      fetch(audio)\n        .then((response) => response.arrayBuffer())\n        .then((buffer) => {\n          const options = {\n            audio_context: audioContext,\n            array_buffer: buffer,\n            scale: 512, //64 128 256 152\n          };\n\n          return new Promise((resolve, reject) => {\n            WaveformData.createFromAudio(options, (err, waveform) => {\n              if (err) {\n                reject(err);\n              } else {\n                resolve(waveform);\n              }\n            });\n          });\n        })\n        .then((waveform) => {\n          setWaveform(waveform);\n          //\n          //\n        });\n    }\n  }, [audio]);\n\n  if (!waveform) {\n    return null;\n  }\n\n  const width = 1200;\n  const height = 200;\n\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10,\n  };\n\n  const innerHeight = height - margin.top - margin.bottom;\n  const innerWidth = width - margin.left - margin.right;\n\n  const channel = waveform.channel(0);\n\n  // const container = d3.select(\"#waveform-container\");\n\n  const min1 = channel.min_array();\n  const max1 = channel.max_array();\n\n  const xScale = scaleLinear()\n    .domain([0, waveform.length])\n    .range([0, innerWidth]);\n\n  //ranground\n  const yScale = scaleLinear()\n    .domain([min(min1), max(max1)])\n    .range([innerHeight, 0])\n    .nice();\n\n  const lineScale = scaleLinear().domain([0, duration]).range([0, innerWidth]);\n\n  return (\n    <>\n      <svg height={height} width={width}>\n        <rect\n          x={0}\n          y={0}\n          height={height}\n          width={width}\n          stroke=\"black\"\n          fill=\"none\"\n        />\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          <rect\n            x={0}\n            y={0}\n            height={innerHeight}\n            width={innerWidth}\n            stroke=\"black\"\n            strokeWidth={0.05}\n            fill=\"none\"\n          />\n\n          <path\n            stroke=\"mediumvioletred\"\n            d={area()\n              .x((d, i) => xScale(i))\n              .y0((d) => yScale(d))\n              .y1((d) => yScale(d))(max1)}\n          />\n          <path\n            fill=\"black\"\n            stroke=\"mediumvioletred\"\n            d={area()\n              .x((d, i) => xScale(i))\n              .y0((d) => yScale(d))\n              .y1((d) => yScale(d))(min1)}\n          />\n          {time && (\n            <g transform={`translate(${lineScale(time)}, 0)`}>\n              <line stroke=\"darkcyan\" y1={innerHeight} />\n            </g>\n          )}\n        </g>\n        <text\n          x={width - 35}\n          y={height - 3}\n          stroke=\"darkmagenta\"\n          opacity={1}\n          fontStyle=\"italic\"\n          opacity={0.7}\n        >\n          {(duration - time).toFixed(2)}\n        </text>\n      </svg>\n    </>\n  );\n};\n","import { useState, useEffect, useRef } from \"react\";\nimport { Waveform } from \"./Waveform\";\nimport { BiMicrophoneOff, BiMicrophone } from \"react-icons/bi\";\nimport { AiOutlineDownload } from \"react-icons/ai\";\n\nnavigator.userMedia =\n  navigator.getUserMedia ||\n  navigator.webkitGetUserMedia ||\n  navigator.mozGetUserMedia ||\n  navigator.msGetUserMedia;\n\nexport function AudioRecorder() {\n  const [playing, setPlaying] = useState(false);\n  const [audioStream, setAudioStream] = useState(null);\n  const [recorder, setRecorder] = useState(null);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const audioPlayer = useRef();\n\n  useEffect(() => {\n    if (recorder) {\n      recorder.start();\n      let chunks = [];\n\n      recorder.ondataavailable = function (ev) {\n        chunks.push(ev.data);\n      };\n\n      recorder.onstop = (ev) => {\n        let blob = new Blob(chunks, { type: \"audio/wav\" });\n        chunks = [];\n        let audioUrl1 = window.URL.createObjectURL(blob);\n        setAudioUrl(audioUrl1);\n      };\n    }\n  }, [recorder]);\n\n  useEffect(() => {\n    const audio = document.getElementsByClassName(\"app_audio\")[0];\n    audio.src = audioUrl;\n  }, [audioUrl]);\n\n  useEffect(() => {\n    const seconds = Math.floor(audioPlayer.current.duration);\n    setDuration(seconds);\n  }, [audioPlayer?.current?.loadedmetadata, audioPlayer?.current?.readyState]);\n\n  const startVideo = async () => {\n    setPlaying(true);\n    const mediaStream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    setAudioStream(mediaStream);\n    setRecorder(new MediaRecorder(mediaStream));\n  };\n\n  const stopVideo = () => {\n    setPlaying(false);\n    audioStream.getTracks()[0].stop();\n    setTimeout(() => {\n      recorder.stop();\n    }, 500);\n    \n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__container\">\n        <audio\n          onPlay={() => setPlaying(true)}\n          ref={audioPlayer}\n          controls\n          className=\"app_audio\"\n        ></audio>\n      </div>\n\n      <div className=\"app__input\">\n        {playing ? (\n          <button onClick={stopVideo}>\n            <BiMicrophoneOff />\n          </button>\n        ) : (\n          <button onClick={startVideo}>\n            <BiMicrophone />\n          </button>\n        )}\n      </div>\n\n      {audioUrl && (\n        <>\n          <Waveform audio={audioUrl} time={currentTime} duration={duration} />\n          <a href={audioUrl} download={`user-audio.mp3`}>\n            <AiOutlineDownload />\n          </a>\n        </>\n      )}\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/veroeproprio.f8a40d8b.wav\";","import React, { useState, useRef, useEffect } from \"react\";\nimport audio from \"../audio/veroeproprio.wav\";\nimport { TiArrowRightOutline, TiArrowLeftOutline } from \"react-icons/ti\";\nimport { BsPlay } from \"react-icons/bs\";\nimport { IoPause } from \"react-icons/io5\";\nimport \"../customAudioPlayer.css\";\n\nexport const CustomAudioPlayer = () => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const audioPlayer = useRef(); //Ref for out audio component\n  const progressBar = useRef(); //Ref to our progress bar\n  const animationRef = useRef(); //Ref the animation\n\n  useEffect(() => {\n    const seconds = Math.floor(audioPlayer.current.duration);\n    setDuration(seconds);\n    progressBar.current.max = seconds;\n  }, [audioPlayer?.current?.loadedmetadata, audioPlayer?.current?.readyState]);\n\n  const togglePlay = () => {\n    const prevValue = isPlaying;\n    setIsPlaying(!prevValue);\n    if (!prevValue) {\n      audioPlayer.current.play();\n      animationRef.current = requestAnimationFrame(whilePlaying);\n    } else {\n      audioPlayer.current.pause();\n      cancelAnimationFrame(animationRef.current);\n    }\n  };\n\n\n  const whilePlaying = () => {\n    progressBar.current.value = audioPlayer.current.currentTime;\n    changePlayerCurrentTime();\n    animationRef.current = requestAnimationFrame(whilePlaying);\n  };\n\n  const finishedPlaying = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n    audioPlayer.current.currentTime = 0;\n  };\n\n  const changeRange = () => {\n    audioPlayer.current.currentTime = progressBar.current.value;\n    changePlayerCurrentTime();\n  };\n\n  const changePlayerCurrentTime = () => {\n    progressBar.current.style.setProperty(\n      \"--seek-before-width\",\n      `${(progressBar.current.value / duration) * 100}%`\n    );\n    setCurrentTime(progressBar.current.value);\n  };\n\n  const backThirtySeconds = () => {\n    progressBar.current.value = Number(progressBar.current.value - 1);\n    \n    changeRange();\n  };\n\n  const forwardThirtySeconds = () => {\n    progressBar.current.value = Number(progressBar.current.value + 1);\n    changeRange();\n  };\n\n  const calculateTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const returnedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    const secs = Math.floor(seconds % 60);\n    const returnedSeconds = secs < 10 ? `0${secs}` : `${secs}`;\n    return `${returnedMinutes}:${returnedSeconds}`;\n  };\n  return (\n    <div className=\"audioPlayer\">\n      <audio onEnded={finishedPlaying} ref={audioPlayer} src={audio}></audio>\n\n      <div className=\"audioPlayerSlider\">\n        {/* current time */}\n        <div className=\"currentTime\">{calculateTime(currentTime)}</div>\n\n        {/* progress bar */}\n        <div>\n          <input\n            onChange={changeRange}\n            ref={progressBar}\n            className=\"progressBar\"\n            type=\"range\"\n            defaultValue=\"0\"\n          />\n        </div>\n\n        {/* duration */}\n        <div className=\"duration\">\n          {duration && !isNaN(duration) && calculateTime(duration)}\n        </div>\n      </div>\n\n      {/* Play buttons */}\n      <div className=\"audioPlayerButtons\">\n        <button onClick={backThirtySeconds} className=\"forwardBackward\">\n          <TiArrowLeftOutline />\n        </button>\n        <button className=\"playPause\" onClick={togglePlay}>\n          {isPlaying ? <IoPause /> : <BsPlay className=\"play\" />}\n        </button>\n        <button onClick={forwardThirtySeconds} className=\"forwardBackward\">\n          <TiArrowRightOutline />\n        </button>\n      </div>\n    </div>\n  );\n};\n","import audio from \"../audio/veroeproprio.wav\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { Waveform } from \"./Waveform\";\nimport { WaveformBars } from \"./WaveformBars\";\nimport { TestAudioLine } from \"./TestAudioLine\";\n\nexport const TestAudio = () => {\n  const [duration, setDuration] = useState(0)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [currentTime, setCurrentTime] = useState(0)\n\n  const audioPlayer = useRef(); //Ref for out audio component\n  const animationRef = useRef(); \n  \n  useEffect(() => {\n    const seconds = audioPlayer.current.duration.toFixed(2);\n    console.log(seconds)\n    setDuration(seconds);\n  }, [audioPlayer?.current?.loadedmetadata, audioPlayer?.current?.readyState]);\n\n  const togglePlay = () => {\n    const prevValue = isPlaying;\n    setIsPlaying(!prevValue);\n    if (!prevValue) {\n      animationRef.current = requestAnimationFrame(whilePlaying);\n    } else {\n      cancelAnimationFrame(animationRef.current);\n    }\n  };\n\n  const whilePlaying = () => {\n    changePlayerCurrentTime()\n    animationRef.current = requestAnimationFrame(whilePlaying);\n  };\n\n  const finishedPlaying = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n    audioPlayer.current.currentTime = 0;\n  };\n\n  const changePlayerCurrentTime = () => {\n    setCurrentTime(audioPlayer.current.currentTime);\n  };\n\n\n  return (\n    <>\n      <audio\n        onPlay={togglePlay}\n        onPause={togglePlay}\n        onEnded={finishedPlaying}\n        ref={audioPlayer}\n        controls\n        className=\"app_audio\"\n        src={audio}\n        preload=\"auto\"\n        \n      />\n      {/* <Waveform audio={audio} time={currentTime} duration={duration}/>\n      <WaveformBars audio={audio} time={currentTime} duration={duration}/>\n      <TestAudioLine time={currentTime} duration={duration}/> */}\n      \n    </>\n  );\n};\n\n\n","import React from \"react\";\nimport {AudioRecorder} from \"./components/AudioRecorder\"\nimport { CustomAudioPlayer } from \"./components/CustomAudioPlayer\";\nimport { TestAudio } from \"./components/TestAudio\";\n\nfunction App() {\n  return (\n    <>\n    \n    <div className=\"app\">\n    <CustomAudioPlayer />\n      <AudioRecorder />\n      <TestAudio />\n\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}